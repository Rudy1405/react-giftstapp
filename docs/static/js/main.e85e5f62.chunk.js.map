{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","element","preventDefault","trim","length","categories","type","value","onChange","target","onClick","defaultProps","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","GifExpertApp","idx","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,kBAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACM,sBAAMC,UAAU,wDAAwDC,SAZzD,SAACC,GAClBA,EAAQC,iBACLL,EAAWM,OAAOC,OAAS,IAC1BT,GAAe,SAAAU,GAAU,OAAOR,GAAP,mBAAsBQ,OAC/CP,EAAc,MAQhB,SACE,uBACQQ,KAAK,OACLC,MAAQV,EACRW,SAnBU,SAACP,GACvBH,EAAcG,EAAQQ,OAAOF,QAmBjBG,QAVI,SAACT,GACjBH,EAAc,UAoBtBJ,EAAYiB,aAAe,CACvBhB,cAAe,I,0CCpCNiB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAEnC,OACI,sBAAKhB,UAAU,+DAAf,UACK,qBAAK8B,IAAKd,GAAW,GAAIe,IAAKL,GAAe,aAC7C,4BAAIA,GAAe,wBCFnBM,EAAU,SAAC,GAAgB,IAAD,EAAdlB,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAc,IAAD,EACXjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAmBrC,OAbAC,qBAAU,WACNvB,EAAQC,GACPuB,MAAK,SAAAC,GACUC,YAAW,WACPJ,EAAS,CACLd,KAAMiB,EACNL,SAAS,MAEd,WAEpB,CAACnB,IAGGoB,EDhBwBM,CAAY1B,GAA/Ba,EAHuB,EAG5BN,KAAaY,EAHe,EAGfA,QAiBpB,OACI,qCACI,qBAAIjC,UAAU,sCAAd,cAAsDc,EAAtD,OAEA,qBAAKd,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACKiC,GAAW,mBAAGjC,UAAU,uDAAb,wBADhB,OAEI,wBAAKA,UAAU,iBAAf,0BAAyC,YAAzC,yBAEQ2B,EAAOJ,KAAK,SAAAC,GACZ,OAAO,cAAC,EAAD,eAEaA,GADEA,EAAIC,QAJlC,aE5BPgB,EAAe,WAAM,MAGM5C,mBAAS,IAHf,mBAGvBS,EAHuB,KAGXV,EAHW,KAK9B,OACI,qCACI,oBAAII,UAAU,4DAAd,gCACA,cAAC,EAAD,CAAaJ,cAAeA,IAC5B,oBAAII,UAAU,0DACd,6BAEQM,EAAWiB,KAAK,SAACT,EAAS4B,GAAV,OACZ,cAAC,EAAD,CAEI5B,SAAWA,GADJA,Y,MCZnC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e85e5f62.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from \"prop-types\"\n\nexport const AddCategory = ( {setCategories} ) => { // aqui como se hizo q en el padre mandara algo aca lo cachamos y asi lo mandamos a llmar\n\n    const [inputValue, setInputValue] = useState(\"Add a category\");\n    const handleInputChange = (element) => {\n        setInputValue(element.target.value); //Tras hacer esto el INPUTVALUE tendra el ultimo valor escrito\n    }\n    const handleSubmit = (element) => {\n        element.preventDefault(); /// ****** Esto es para evitar que el form provoque un refresh de la pagina\n        if(inputValue.trim().length > 2){\n            setCategories( categories =>  [ inputValue, ...categories] ); // obt el estado anterior y anexamos el input value\n            setInputValue(\"\");\n        }\n    }\n    const handleClick = (element) => {\n        setInputValue(\"\");\n    }\n    /// en este caso no usamos el <></> para indicar que hay un elemento agrupador del componente porque el FORM ya lo es\n    return (\n          <form className=\"animate__animated animate__zoomIn animate__delay-0.5s\" onSubmit={handleSubmit}>\n            <input \n                    type=\"text\"\n                    value= {inputValue}\n                    onChange={ handleInputChange }\n                    onClick={handleClick}\n\n            />\n          </form>\n    )\n}\n\nAddCategory.propTypes = {\n        setCategories: PropTypes.func.isRequired  // es func porque el setCategories es una funcion lo que se envia\n}\n\nAddCategory.defaultProps = {\n    setCategories: []\n}\n","\n\nexport const getGifs = async (category) => {\n    const url= `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=pdlj9XBVF02CH7jOpNNSQz8jLFCMizEf`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs; /// regresa un promise\n}","import React from 'react'\n\nexport const GifGridItem = ( {id,title,url} ) => { // aqui ya tenemos los props enviados por [...img] por ende podemos llamar asi a sus elementos solo para usarlos directamente cada vez que se cree un componente de estos\n   \n    return (\n        <div className=\"card animate__animated animate__fadeInUp animate__delay-0.5s\">\n             <img src={url? url : \"\"} alt={title? title : \"No Title\"} />\n             <p>{title? title : \"Imagen Generica\"}</p>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data:images, loading} = useFetchGif(category); // como usefetchGif regresa un obj, lo podemos desestructurar\n          /// en la desesctructracion podemos renombrar variables, por ejemplo data llamarle images para usarlo como images abajo\n/*\n    El useEffect nos servia para cargar por primera vez todo, pero se uso el customHOOK de usefetchgif por ende ya no se ocupara\n\n    const [imagesValue, setImagesValue] = useState([])\n    useEffect( ()=>{ // useEffect es un hook para ejecutar codigo de forma condicional para que el getgifs por cualqueir cambio no se este llame y llame pueh\n        getGifs(category) // mando a llamar a mi helper que es una promesa que me hace el fetch de lo que mande en category desde el AddCategory\n        .then(imgs => setImagesValue(imgs)) \n    }, [category]) // aqui van las dependencias de cuando ejecutar el codigo... un [] es para que solo se ejecute 1 vez\n                   // se pone con [category] para evitar un warning de que el category puede cambiar en alguna de sus posiciones \n     /// antes aqui estaba el getgifs pero se paso a un helper para tener mejor acomodado el codigo, ahora se llama drecto en el useEffect\n*/\n   \n\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInUp\"> {category} </h3>\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    {loading && <p className=\"animate__animated animate__hinge animate__delay-0.5s\">Loading...</p>}    { /*  lo anterior es igual a {loading ? <p>Loading...</p> : null} */}\n                    <div className='class=\"col-6\"' className=\"cardGrid\">            \n                        { // las {} es para denotar que vamos a meter JS\n                            images.map( img => { // en lugar de (img) se puede desestructurar a {id,title,url} para solo tener los elementos POR elemento que queremos\n                            return <GifGridItem \n                                            key= {img.id}\n                                            {...img } // mandandolo asi, estamos mandando solo las propiedades de cada IMG y por ende poder desestructurar en el GIFGRIDITEM\n                                /> // Creamos un nuevo componente porque pues adentro ira un pedazo de HTML con mucho mas cuerpo\n                            })  \n                        }\n                    </div>\n                </div>\n            </div>\n\n            { // Esto es con la version del useEfecct antes del customHook\n            /* <div className=\"container\"> \n                <div className=\"row\">\n                    <div className='class=\"col-6\"' className=\"cardGrid\">            \n                        { // las {} es para denotar que vamos a meter JS\n                            imagesValue.map( img => { // en lugar de (img) se puede desestructurar a {id,title,url} para solo tener los elementos POR elemento que queremos\n                            return <GifGridItem \n                                            key= {img.id}\n                                            {...img } // mandandolo asi, estamos mandando solo las propiedades de cada IMG y por ende poder desestructurar en el GIFGRIDITEM\n                                /> // Creamos un nuevo componente porque pues adentro ira un pedazo de HTML con mucho mas cuerpo\n                            })  \n                        }\n                    \n                    </div>\n                </div>\n            </div> */}\n           \n            \n        </>\n    )\n}\n","import {useEffect, useState} from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n/// Los hooks pueden tambien tener states, como para indicar a otros componentes cuando usarse porque algo cambio\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{ // los efectos no pueden ser ASYNC por eso eso se hace adentro\n        getGifs(category)\n        .then(imgs => {\n                        setTimeout(() => { // settimeout para simular carga\n                            setState({  // ahora lo que regresa mi promise getgifs lo metemos en data y controlamos el loading\n                                data: imgs,\n                                loading: false\n                            })\n                        }, 1500);    \n                   })\n    }, [category]) // mandamos a llamar el useEffect cuando category cambie\n\n\n    return state; // el state es un obj ahora {data:[], loading: true}\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = [\"One Punch\",\"SNK\",\"cool cats\"]\n    const [categories, setCategories] = useState([]);\n   \n    return (\n        <>\n            <h2 className=\"animate__animated animate__jackInTheBox animate__delay-1s\"> Gif Detective App</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr className=\"animate__animated animate__zoomIn animate__delay-0.5s\" />\n            <ol>\n                {\n                    categories.map( (category,idx) => (\n                        <GifGrid  // Aqui usamos los () en lugar de {} para denotar el return lo cual crea una instancia de GifGrid por cada enter en AddCategory\n                            key = {category} \n                            category= {category}\n                        />\n                    )) \n                }\n                \n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}